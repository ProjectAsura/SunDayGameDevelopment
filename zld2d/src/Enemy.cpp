//-----------------------------------------------------------------------------
// File : Enemy.cpp
// Desc : Enemy.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <Enemy.h>
#include <MessageId.h>


///////////////////////////////////////////////////////////////////////////////
// Enemy class
///////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//      コンストラクタです.
//-----------------------------------------------------------------------------
Enemy::Enemy()
: m_Random(1234567)
{ /* DO_NOTHING */ }

//-----------------------------------------------------------------------------
//      デストラクタです.
//-----------------------------------------------------------------------------
Enemy::~Enemy()
{
    auto itr = m_Components.begin();
    while(itr != m_Components.end())
    {
        auto ptr = *itr;
        delete ptr;
        itr = m_Components.erase(itr);
    }
    m_Components.clear();
}

//-----------------------------------------------------------------------------
//      コンポーネントを追加します.
//-----------------------------------------------------------------------------
void Enemy::AddComponent(IEnemyComponent* component)
{
    if (component == nullptr)
    { return; }

    m_Components.push_back(component);
}

//-----------------------------------------------------------------------------
//      更新処理を行います.
//-----------------------------------------------------------------------------
void Enemy::Update(UpdateContext& context)
{
    if (int(m_Frame) + 1 > 255)
    { m_Frame = 0; }
    else
    { m_Frame++; }

    if (m_Life > 0)
    {
        if (context.BoxYellow != nullptr)
        {
            if (IsHit(*context.BoxYellow, m_Box))
            { SetDamage(1); }
        }

        if (context.BoxRed != nullptr)
        {
            int damage = 1;
            Message msg(MESSAGE_ID_PLAYER_DAMAGE, &damage, sizeof(damage));
            SendMsg(msg);
        }
    }

    if (m_Life == 0)
    {
        Message msg(MESSAGE_ID_ENEMY_DEAD);
        SendMsg(msg);
    }
    else
    {
        for(auto& itr : m_Components)
        { itr->Update(context, *this); }
    }
}

//-----------------------------------------------------------------------------
//      描画処理を行います.
//-----------------------------------------------------------------------------
void Enemy::Draw(SpriteSystem& sprite)
{ /* DO_NOTHING */ }

//-----------------------------------------------------------------------------
//      バウンディングボックスを設定します.
//-----------------------------------------------------------------------------
void Enemy::SetBox(const Box& box)
{ m_Box = box; }

//-----------------------------------------------------------------------------
//      バウンディングボックスを取得します.
//-----------------------------------------------------------------------------
const Box& Enemy::GetBox() const
{ return m_Box; }

//-----------------------------------------------------------------------------
//      HPを取得します.
//-----------------------------------------------------------------------------
int Enemy::GetLife() const
{ return m_Life; }

//-----------------------------------------------------------------------------
//      ダメージを設定します.
//-----------------------------------------------------------------------------
void Enemy::SetDamage(int value)
{ m_Life -= value; }

//-----------------------------------------------------------------------------
//      HPを設定します.
//-----------------------------------------------------------------------------
void Enemy::SetLife(int value)
{ m_Life = value; }

//-----------------------------------------------------------------------------
//      移動方向を取得します.
//-----------------------------------------------------------------------------
DIRECTION_STATE Enemy::GetDir() const
{ return m_Dir; }

//-----------------------------------------------------------------------------
//      移動方向を設定します.
//-----------------------------------------------------------------------------
void Enemy::SetDir(DIRECTION_STATE value)
{ m_Dir = value; }

//-----------------------------------------------------------------------------
//      メッセージ受信処理を行います.
//-----------------------------------------------------------------------------
void Enemy::OnReceive(const Message& msg)
{
    for(auto& itr : m_Components)
    { itr->OnReceive(msg, *this); }
}

//-----------------------------------------------------------------------------
//      疑似乱数発生器を取得します.
//-----------------------------------------------------------------------------
asdx::PCG& Enemy::GetRandom()
{ return m_Random; }

