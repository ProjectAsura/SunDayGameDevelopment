//-----------------------------------------------------------------------------
// File : Enemy.h
// Desc : Enemy.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <asdxTexture.h>
#include <DirectionState.h>
#include <UpdateContext.h>
#include <SpriteSystem.h>
#include <Box.h>
#include <TextureHelper.h>


///////////////////////////////////////////////////////////////////////////////
// Enemy class
///////////////////////////////////////////////////////////////////////////////
class Enemy
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Enemy() 
    : m_Random(1234567)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~Enemy()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    virtual bool Init()
    { return true; }

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    virtual void Term()
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //-------------------------------------------------------------------------
    virtual void Update(UpdateContext& context)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //-------------------------------------------------------------------------
    virtual void Draw(SpriteSystem& sprite) {}

protected:
    //=========================================================================
    // protected variables.
    //=========================================================================
    Vector2i        m_Pos       = Vector2i(0, 0);
    int             m_State     = 0;
    int             m_Life      = 1;
    Box             m_Box       = {};
    DIRECTION_STATE m_Direction = DIRECTION_LEFT;
    uint32_t        m_Frame     = 0;
    asdx::PCG       m_Random;

    //=========================================================================
    // protected methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      フレーム番号を更新します.
    //-------------------------------------------------------------------------
    void UpdateFrame()
    {
        if (uint64_t(m_Frame) + 1 > UINT32_MAX)
        { m_Frame = 0; }
        else
        { m_Frame++; }
    }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};
