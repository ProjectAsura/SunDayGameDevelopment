//-----------------------------------------------------------------------------
// File : Gimmick.h
// Desc : Gimmick Object.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d11.h>
#include <Box.h>
#include <UpdateContext.h>
#include <SpriteSystem.h>
#include <DirectionState.h>


///////////////////////////////////////////////////////////////////////////////
// GIMMICK_TYPE
///////////////////////////////////////////////////////////////////////////////
enum GIMMICK_TYPE
{
    GIMMICK_TYPE_NONE       = 0,
    GIMMICK_TYPE_PUSHABLE   = 0x1 << 0,     //!< 押し出し可能.
    GIMMICK_TYPE_BREAKABLE  = 0x1 << 1,     //!< 破壊可能.
    GIMMICK_TYPE_SWITCHABLE = 0x1 << 2,     //!< 切り替え可能.
    GIMMICK_TYPE_LOCKABLE   = 0x1 << 3,     //!< 施錠可能.
};

///////////////////////////////////////////////////////////////////////////////
// Block class
///////////////////////////////////////////////////////////////////////////////
class Block
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Block();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Block();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      x       X座標.
    //! @param[in]      y       Y座標.
    //! @param[in]      w       横幅.
    //! @param[in]      h       縦幅.
    //! @param[in]      dir     移動方向制限.
    //! @param[in]      pSRV    描画テクスチャ.
    //-------------------------------------------------------------------------
    void Init(
        int x, int y, int w, int h,
        DIRECTION_STATE dir,
        ID3D11ShaderResourceView* pSRV);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //-------------------------------------------------------------------------
    bool Update(const Box& playerBox);

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //-------------------------------------------------------------------------
    void Draw(SpriteSystem& sprite);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    Box                         m_Box       = {};
    ID3D11ShaderResourceView*   m_pSRV      = nullptr;
    uint8_t                     m_Frame     = 0;
    bool                        m_PrevHit   = false;
    DIRECTION_STATE             m_Dir       = DIRECTION_DOWN;
    int                         m_Moved     = 0;
    bool                        m_Complete  = false;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};