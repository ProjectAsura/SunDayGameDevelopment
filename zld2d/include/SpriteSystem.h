//-------------------------------------------------------------------------------------------------
// File : SpriteSystem
// Desc : Sprite Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <d3d11.h>
#include <asdxMath.h>
#include <asdxRef.h>
#include <vector>
#include <Box.h>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Sprite class
///////////////////////////////////////////////////////////////////////////////////////////////////
class SpriteSystem
{
    //=============================================================================================
    // list of friend classed and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    SpriteSystem();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~SpriteSystem();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      screenWidth     スクリーンの横幅です.
    //! @param[in]      screenHeight    スクリーンの縦幅です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice, float screenWidth, float screenHeight );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画開始処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //! @param[in]      shaderType          設定するシェーダのタイプです.
    //---------------------------------------------------------------------------------------------
    void Begin( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //---------------------------------------------------------------------------------------------
    void Draw(ID3D11ShaderResourceView* pSRV, const Box& box);

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //---------------------------------------------------------------------------------------------
    void Draw(ID3D11ShaderResourceView* pSRV, const Box& box, int layerDepth);

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11ShaderResourceView* pSRV, const int x, const int y, const int w, const int h );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      uv0         左下のテクスチャ座標です.
    //! @param[in]      uv1         右上のテクスチャ座標です.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11ShaderResourceView* pSRV, const int x, const int y, const int w, const int h, const asdx::Vector2& uv0, const asdx::Vector2& uv1 );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      layerDepth  深度レイヤーです.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11ShaderResourceView* pSRV, const int x, const int y, const int w, const int h, const int layerDepth );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      uv0         左下のテクスチャ座標です.
    //! @param[in]      uv1         右上のテクスチャ座標です.
    //! @param[in]      layerDepth  深度レイヤーです.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11ShaderResourceView* pSRV, const int x, const int y, const int w, const int h, const asdx::Vector2& uv0, const asdx::Vector2& uv1, const int layerDepth );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画終了処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void End( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンサイズを設定します.
    //!
    //! @param[in]      width       スクリーンの横幅です.
    //! @param[in]      height      スクリーンの縦幅です.
    //---------------------------------------------------------------------------------------------
    void SetScreenSize( float width, float height );

    //---------------------------------------------------------------------------------------------
    //! @brief      頂点カラーを設定します.
    //!
    //! @param[in]      r           R成分です.
    //! @param[in]      g           G成分です.
    //! @param[in]      b           B成分です.
    //! @param[in]      a           A成分です.
    //---------------------------------------------------------------------------------------------
    void SetColor( float r, float g, float b, float a );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンサイズを取得します.
    //!
    //! @return     設定されているスクリーンサイズを返却します.
    //---------------------------------------------------------------------------------------------
    asdx::Vector2 GetScreenSize() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      頂点カラーを取得します.
    //!
    //! @return     設定されている頂点カラーを返却します.
    //---------------------------------------------------------------------------------------------
    asdx::Vector4 GetColor() const;

protected:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Vertex structure
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct Vertex
    {
        asdx::Vector3 Position;     //!< 位置座標です.
        asdx::Vector4 Color;        //!< 頂点カラーです.
        asdx::Vector3 TexCoord;     //!< テクスチャ座標です.
    };

    //=============================================================================================
    // protectecd variables.
    //=============================================================================================
    static const size_t                     InputElementCount = 3;
    static const D3D11_INPUT_ELEMENT_DESC   InputElements[ InputElementCount ];

    static const size_t     NUM_SPRITES             = 512;
    static const size_t     NUM_VERTEX_PER_SPRITE   = 4;
    static const size_t     NUM_INDEX_PER_SPRITE    = 6;

    asdx::RefPtr<ID3D11VertexShader> m_pVS;
    asdx::RefPtr<ID3D11PixelShader>  m_pPS;
    asdx::RefPtr<ID3D11Buffer>       m_pVB;
    asdx::RefPtr<ID3D11Buffer>       m_pIB;
    asdx::RefPtr<ID3D11Buffer>       m_pCB;
    asdx::RefPtr<ID3D11InputLayout>  m_pIL;
    std::vector<ID3D11ShaderResourceView*> m_SRV;

    uint32_t        m_SpriteCount;
    asdx::Vector2   m_ScreenSize;
    asdx::Vector4   m_Color;
    asdx::Matrix    m_Transform;
    std::vector<Vertex> m_Vertices;

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    /* NOTHING */

    //==============================================================================================
    // private methods.
    //==============================================================================================
    SpriteSystem              (const SpriteSystem&) = delete;
    SpriteSystem& operator =  (const SpriteSystem&) = delete;
};

