//-----------------------------------------------------------------------------
// File : Entity.h
// Desc : Entity Object.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <map>
#include <Box.h>
#include <MessageMgr.h>
#include <UpdateContext.h>
#include <SpriteSystem.h>


//-----------------------------------------------------------------------------
// Forward Decalarations.
//-----------------------------------------------------------------------------
class Component;


///////////////////////////////////////////////////////////////////////////////
// Entity class
///////////////////////////////////////////////////////////////////////////////
class Entity : public IMessageListener
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////
    // STATE enum
    ///////////////////////////////////////////////////////////////////////////
    enum STATE
    {
        STATE_ACTIVE,       //!< 生存.
        STATE_PAUSED,       //!< 一時停止.
        STATE_DEAD,         //!< 死亡.
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Entity() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Entity();

    //-------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //-------------------------------------------------------------------------
    void Update(UpdateContext& context);

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //-------------------------------------------------------------------------
    void Draw(SpriteSystem& sprite);

    //-------------------------------------------------------------------------
    //! @brief      コンポーネントを追加します.
    //-------------------------------------------------------------------------
    void AddComponent(uint32_t id, Component* component);

    //-------------------------------------------------------------------------
    //! @brief      コンポーネントを削除します.
    //-------------------------------------------------------------------------
    void RemoveComponent(uint32_t id);

    //-------------------------------------------------------------------------
    //! @brief      コンポーネントを取得します.
    //-------------------------------------------------------------------------
    Component* GetComponent(uint32_t id) const;

    //-------------------------------------------------------------------------
    //! @brief      コンポーネントを持つかどうか?
    //-------------------------------------------------------------------------
    bool HasComponent(uint32_t id) const;

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを設定します.
    //-------------------------------------------------------------------------
    void SetBox(const Box& box);

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    const Box& GetBox() const;

    //-------------------------------------------------------------------------
    //! @brief      状態を設定します.
    //-------------------------------------------------------------------------
    void SetState(STATE state);

    //-------------------------------------------------------------------------
    //! @brief      状態を取得します.
    //-------------------------------------------------------------------------
    STATE GetState() const;

    //-------------------------------------------------------------------------
    //! @brief      疑似乱数発生器を取得します.
    //-------------------------------------------------------------------------
    asdx::PCG& GetRandom();

    //-------------------------------------------------------------------------
    //! @brief      メッセージ受信時の処理です.
    //-------------------------------------------------------------------------
    void OnMessage(const Message& msg) override;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    STATE                           m_State;
    Box                             m_Box;
    asdx::PCG                       m_Random;
    std::map<uint32_t, Component*>  m_Components;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};