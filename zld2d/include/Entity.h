//-----------------------------------------------------------------------------
// File : GameObject.h
// Desc : GameObject.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <map>


///////////////////////////////////////////////////////////////////////////////
// Message class
///////////////////////////////////////////////////////////////////////////////
class Message
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //!
    //! @param[in]      type        タイプです
    //! @param[in]      buffer      バッファです.
    //! @param[in]      size        バッファサイズです.
    //-------------------------------------------------------------------------
    Message(uint32_t type, const void* buffer = nullptr, uint64_t size = 0)
    : m_Type    (type)
    , m_Buffer  (buffer)
    , m_Size    (size)
    { /* DO_NOTHING */ }

    //-------------------------------------------------------------------------
    //! @brief      タイプを取得します.
    //! 
    //! @return     タイプを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetType() const
    { return m_Type; }

    //-------------------------------------------------------------------------
    //! @brief      バッファを取得します.
    //! 
    //! @return     バッファを返却します.
    //-------------------------------------------------------------------------
    const void* GetBuffer() const
    { return m_Buffer; }

    //-------------------------------------------------------------------------
    //! @brief      バッファサイズを取得します.
    //! 
    //! @return     バッファサイズを返却します.
    //-------------------------------------------------------------------------
    uint64_t GetSize() const
    { return m_Size; }

    //-------------------------------------------------------------------------
    //! @brief      バッファを取得します.
    //! 
    //! @return     バッファを返却します.
    //-------------------------------------------------------------------------
    template<typename T>
    const T* GetBufferAs() const
    { return reinterpret_cast<const T*>(m_Buffer); }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    uint32_t    m_Type      = 0;
    const void* m_Buffer    = nullptr;
    uint64_t    m_Size      = 0;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// IEntity interface
///////////////////////////////////////////////////////////////////////////////
struct IEntity
{
    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~IEntity() {}

    //-------------------------------------------------------------------------
    //! @brief      メッセージ受信処理です.
    //-------------------------------------------------------------------------
    virtual void OnReceive(const Message& msg) = 0;
};

///////////////////////////////////////////////////////////////////////////////
// EntityMgr class
///////////////////////////////////////////////////////////////////////////////
class EntityMgr
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      シングルトンインスタンスを取得します.
    //-------------------------------------------------------------------------
    static EntityMgr& Instance();

    //-------------------------------------------------------------------------
    //! @brief      エンティティを破棄します.
    //-------------------------------------------------------------------------
    void Clear();

    //-------------------------------------------------------------------------
    //! @brief      エンティティを追加します.
    //-------------------------------------------------------------------------
    void Add(uint32_t id, IEntity* object);

    //-------------------------------------------------------------------------
    //! @brief      エンティティを削除します.
    //-------------------------------------------------------------------------
    void Remove(uint32_t id);

    //-------------------------------------------------------------------------
    //! @brief      エンティティを保持するかどうかチェックします.
    //------------------------------------------------------------------------
    bool Contains(uint32_t id) const;

    //-------------------------------------------------------------------------
    //! @brief      メッセージを送信します.
    //-------------------------------------------------------------------------
    void Send(const Message& msg);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    static EntityMgr                s_Instance;
    std::map<uint32_t, IEntity*>    m_Entities;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

//-----------------------------------------------------------------------------
//! @brief      エンティティを追加します.
//-----------------------------------------------------------------------------
inline void AddEntity(uint32_t id, IEntity* entity)
{ EntityMgr::Instance().Add(id, entity); }

//-----------------------------------------------------------------------------
//! @brief      エンティティを削除します.
//-----------------------------------------------------------------------------
inline void RemoveEntity(uint32_t id)
{ EntityMgr::Instance().Remove(id); }

//-----------------------------------------------------------------------------
//! @brief      エンティティを保持するかチェックします.
//-----------------------------------------------------------------------------
inline bool HasEntity(uint32_t id)
{ return EntityMgr::Instance().Contains(id); }

//-----------------------------------------------------------------------------
//! @brief      メッセージを送信します.
//-----------------------------------------------------------------------------
inline void SendMsg(const Message& msg)
{ EntityMgr::Instance().Send(msg); }
