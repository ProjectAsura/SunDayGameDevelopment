//-----------------------------------------------------------------------------
// File : EventSystem.h
// Desc : System For Game Event.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <MessageMgr.h>
#include <TextWriter.h>
#include <SpriteSystem.h>


///////////////////////////////////////////////////////////////////////////////
// EventMsg structure
///////////////////////////////////////////////////////////////////////////////
struct EventMsg
{
    uint32_t    ScenarioId;     //!< シナリオID.
    uint32_t    EventId;        //!< イベントID.
};

///////////////////////////////////////////////////////////////////////////////
// EventSystem class
///////////////////////////////////////////////////////////////////////////////
class EventSystem : public IMessageListener
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    EventSystem();

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ~EventSystem();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init(IDWriteFactory* pFactory, ID2D1DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      メッセージウィンドウ枠を表示します.
    //-------------------------------------------------------------------------
    void DrawWindow(SpriteSystem& sprite, bool upper = false);

    //-------------------------------------------------------------------------
    //! @brief      会話メッセージを表示します.
    //-------------------------------------------------------------------------
    void DrawMsg(ID2D1DeviceContext* context, bool upper = false);

    //-------------------------------------------------------------------------
    //! @brief      メッセージ受信時の処理です.
    //-------------------------------------------------------------------------
    void OnMessage(const Message& msg) override;

    //-------------------------------------------------------------------------
    //! @brief      シナリオIDを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetScenarioId() const;

    //-------------------------------------------------------------------------
    //! @brief      イベントIDを取得します.
    //-------------------------------------------------------------------------
    uint32_t GetEventId() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    bool                m_IsDraw        = false;
    const wchar_t*      m_Lines[5]      = {};
    uint32_t            m_ScenarioId    = UINT32_MAX;
    uint32_t            m_EventId       = UINT32_MAX;
    uint8_t             m_Type          = 0;
    uint8_t             m_CurrentChoice = 0;
    ID2D1DeviceContext* m_pContext      = nullptr;
    TextWriter          m_Writer;

    //=========================================================================
    // private methods.
    //=========================================================================

    ///------------------------------------------------------------------------
    //! @brief      選択枝無しの会話メッセージを表示します.
    //-------------------------------------------------------------------------
    void DrawEventMsg(const wchar_t* msg, bool upper);

    //-------------------------------------------------------------------------
    //! @brief      2択の会話メッセージを表示します.
    //-------------------------------------------------------------------------
    void DrawChoices2(const wchar_t* msg, const wchar_t* choise0, const wchar_t* choise1, bool upper);

    //-------------------------------------------------------------------------
    //! @brief      イベント内容を問い合わせる.
    //-------------------------------------------------------------------------
    void Query();

};
