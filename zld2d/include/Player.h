//-----------------------------------------------------------------------------
// File : Player.h
// Desc : Player.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <asdxTexture.h>
#include <SpriteSystem.h>
#include <UpdateContext.h>
#include <DirectionState.h>
#include <Box.h>
#include <MessageMgr.h>


///////////////////////////////////////////////////////////////////////////////
// PLAYER_ACTION
///////////////////////////////////////////////////////////////////////////////
enum PLAYER_ACTION
{
    PLAYER_ACTION_NONE,     // 無し.
    PLAYER_ACTION_ATTACK,   // 攻撃.
    PLAYER_ACTION_CHOICE,   // メッセージ選択.
};

///////////////////////////////////////////////////////////////////////////////
// Player class
///////////////////////////////////////////////////////////////////////////////
class Player : public IMessageListener
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Player();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~Player();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //-------------------------------------------------------------------------
    bool Init();

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      更新処理を行います.
    //-------------------------------------------------------------------------
    void Update(UpdateContext& context);

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //-------------------------------------------------------------------------
    void Draw(SpriteSystem& sprite);

    //-------------------------------------------------------------------------
    //! @brief      スポーンします.
    //-------------------------------------------------------------------------
    void Spawn(int tileX, int tileY, bool resetLife = false);

    //-------------------------------------------------------------------------
    //! @brief      ライフ数を取得します.
    //-------------------------------------------------------------------------
    uint8_t GetLife() const
    { return m_Life; }

    //-------------------------------------------------------------------------
    //! @brief      最大ライフ数を取得します.
    //-------------------------------------------------------------------------
    uint8_t GetMaxLife() const
    { return m_MaxLife; }

    //-------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //-------------------------------------------------------------------------
    Box GetBox() const
    { return m_Box; }

    //-------------------------------------------------------------------------
    //! @brief      移動方向を取得します.
    //-------------------------------------------------------------------------
    DIRECTION_STATE GetDir() const
    { return m_Direction; }

    //-------------------------------------------------------------------------
    //! @brief      メッセージ受信処理です.
    //-------------------------------------------------------------------------
    void OnMessage(const Message& msg) override;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    int                 m_Action        = 0;
    Box                 m_Box           = {};
    Box                 m_HitBox        = {};
    uint8_t             m_Life          = 3;
    uint8_t             m_MaxLife       = 3;
    float               m_AnimLastTime  = 0.0f;
    DIRECTION_STATE     m_Direction     = DIRECTION_LEFT;
    uint8_t             m_AnimFrame     = 0;
    asdx::Texture2D     m_PlayerTexture[12];
    asdx::Texture2D     m_WeaponTexture[4];
    int                 m_NonDamageFrame = 0;
    uint8_t             m_Flags         = 0;
    asdx::Vector2       m_Scroll        = asdx::Vector2(0.0f, 0.0f);
    uint8_t             m_MapFlag       = 0;

    //=========================================================================
    // private methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      タイル番号から位置座標を設定します.
    //-------------------------------------------------------------------------
    void SetTilePos(int tileX, int tileY);

    //-------------------------------------------------------------------------
    //! @brief      スクロール処理を行います.
    //-------------------------------------------------------------------------
    void OnScroll(const Message& msg);

    //-------------------------------------------------------------------------
    //! @brief      ダメージを設定します.
    //-------------------------------------------------------------------------
    void OnReceiveDamage(const Message& msg);

    //-------------------------------------------------------------------------
    //! @brief      スクロール完了時の処理を行います.
    //-------------------------------------------------------------------------
    void OnScrollComplted();
};
